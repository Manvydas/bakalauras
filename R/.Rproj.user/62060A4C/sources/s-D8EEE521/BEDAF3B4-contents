
library(data.table)

setwd("K:/GMID Research/a.IndustryProjects/IDM/Aggregation")

# file with product codes and names
productNames <- fread("./Mappings/Products.csv")



# AD
inputDataAD <- fread("dat.csv")
treeDataAD <- fread("./AD2018/AD2018_aggregation_tree.csv",
                    select = c("ctyCode", "Product", "Source", "datCode", "sign"))
treeDataAD <- treeDataAD[ctyCode %in% "IS", ]

dataAD <- readRDS("datnewAD.rds")


# PK
dataPK <- readRDS("datnewPK.rds")
treeDataPK <- fread("./PK2019/PK2019_aggregation_tree.csv",
                    select = c("ctyCode", "Product", "Source", "datCode", "sign"))
treeDataPK <- treeDataPK[ctyCode %in% "UK", ]



agg <- function(input_data, tree_data, product_names) {
  
  # multiplying
  input_data$Volume <- input_data$Volume * input_data$volmult
  input_data$Value <- input_data$Value * input_data$valmult
  
  # melting data
  input_data <- melt(input_data, measure.vars = c("Value", "Volume"))
  
  # adding dataCode column to input data
  data_code <- data.frame(
    numb = c(90, 91, 10016, 10018, 1, 10001),
    trade = c("Off-trade", "On-trade", "Off-trade", "On-trade", "Retail", "Retail"),
    var = c("Volume", "Volume", "Value", "Value", "Volume", "Value")
  )
  
  input_data$datCode <- data_code$numb[match(
    paste(input_data$datType, input_data$variable),
    paste(data_code$trade, data_code$var)
  )]
  
  # merging data
  tree_data$Source <- as.character(tree_data$Source)
  setnames(tree_data, "Source", "prdCode")
  
  dat <- merge(tree_data[Product != prdCode, ],
               input_data,
               by = c("prdCode", "datCode"),
               allow.cartesian = TRUE
  )
  
  # multiplying by +-1
  dat$value <- dat$value * dat$sign
  
  # changing NA to 0 to keep all rows in final data
  dat[is.na(dat)] <- 0
  
  # calculation
  final_data <- copy(input_data)
  if (nrow(dat[complete.cases(value), ]) > 0) {
    
    final_data <- rbind(final_data,
                        (dat[variable %in% "Volume",
                             .(prdName = Product,
                               prdCode = Product,
                               variable = "Volume",
                               value = if (length(unique(voluntName)) <= 1){sum(value)} else {numeric()}, # 2 times slower
                               valmult = max(valmult),
                               voluntName = if (length(unique(voluntName)) <= 1){unique(voluntName)} else {character()},
                               volmult = if (length(unique(voluntName)) <= 1){max(volmult)} else {integer()}
                             ), by = .(Product, Year, datType)])
                        , fill = TRUE)
    
    final_data <- rbind(final_data,
                        (dat[variable %in% "Value",
                             .(prdName = Product,
                               prdCode = Product,
                               variable = "Value",
                               value = sum(value) ,
                               valmult = max(valmult),
                               voluntName = if (length(unique(voluntName)) <= 1){unique(voluntName)} else {character()},
                               volmult = if (length(unique(voluntName)) <= 1){max(volmult)} else {integer()}
                             ), by = .(Product, Year, datType)])
                        , fill = TRUE)
  } else {NULL}
  
  
  final_data <- dcast(final_data,
                      prdName + datType + Year + prdCode + prdOrder + cpi + valmult
                      + voluntName + volmult + Price  ~ variable,
                      value.var = "value"
  )
  
  # changing parents' names
  final_data[final_data$prdName %in% product_names$prdCode]$prdName <-
    product_names$prdName[match(final_data[final_data$prdName %in% product_names$prdCode]$prdName, product_names$prdCode)] #########################
  
  # calculating Price
  final_data$Price[is.na(final_data$Price)] <- final_data$Value[
    is.na(final_data$Price)] / final_data$Volume[is.na(final_data$Price)]
  
  # dividing 
  final_data$Volume <- final_data$Volume / final_data$volmult
  final_data$Value <- final_data$Value / final_data$valmult
  
  # changing 0 and NaN to NA
  final_data[is.na(final_data)] <- NA
  final_data[final_data == 0] <- NA
  
  final_data[, c(1, 2, 3, 4, 5, 11, 12, 6, 7, 8, 9, 10)]
}





datPK <- agg(dataPK, treeDataPK, productNames)


datAD <- agg(dataAD, treeDataAD, productNames)



# adjusted function 

aggregate_sizes <- function(childrendata, aggregation_tree, order) {
  
  
  # library(data.table)
  
  # setwd("K:/GMID Research/a.IndustryProjects/IDM/Aggregation")
  
  # file with product codes and names
  # productNames <- fread("./Mappings/Products.csv")
  
  
  # AD
  # inputDataAD <- fread("dat.csv")
  # inputDataAD <- childrendata
  
  # treeDataAD <- fread("./AD2018/AD2018_aggregation_tree.csv",
  #                     select = c("ctyCode", "Product", "Source", "datCode", "sign"))
  # treeDataAD <- treeDataAD[ctyCode %in% "IS", ]
  
  # treeDataAD <- aggregation_tree[, .(ctyCode, Product, Source, datCode, sign)]
  
  # dataAD <- readRDS("datnewAD.rds")
  
  
  # PK
  # dataPK <- readRDS("datnewPK.rds")
  # treeDataPK <- fread("./PK2019/PK2019_aggregation_tree.csv",
  # select = c("ctyCode", "Product", "Source", "datCode", "sign"))
  # treeDataPK <- treeDataPK[ctyCode %in% "UK", ]
  
  
  
  # agg <- function(input_data, tree_data, product_names) {
  
  
  
  input_data <- as.data.frame(childrendata)
  ord <- as.data.frame(order)
  nms <- colnames(input_data)
  tree_data <- as.data.frame(aggregation_tree)[, c("ctyCode", "Product", "Source", "datCode", "sign")]
  product_names <- Products
  
  cpi <- unique(input_data[,c("Year", "cpi")])
  input_data <- input_data[,c(colnames(input_data)[!colnames(input_data) %in% c("cpi", "prdOrder")])]
  
  # multiplying
  input_data$Volume <- input_data$Volume * input_data$volmult
  input_data$Value <- input_data$Value * input_data$valmult
  
  # melting data
  input_data <- melt(input_data, measure.vars = c("Value", "Volume"))
  
  # adding dataCode column to input data
  data_code <- data.frame(
    numb = c(90, 91, 10016, 10018, 1, 10001),
    trade = c("Off-trade", "On-trade", "Off-trade", "On-trade", "Retail", "Retail"),
    var = c("Volume", "Volume", "Value", "Value", "Volume", "Value")
  )
  
  input_data$datCode <- data_code$numb[match(
    paste(input_data$datType, input_data$variable),
    paste(data_code$trade, data_code$var)
  )]
  
  # merging data
  tree_data$Source <- as.character(tree_data$Source)
  tree_data <- as.data.table(tree_data)
  setnames(tree_data, "Source", "prdCode")
  
  dat <- merge(tree_data[Product != prdCode, ],
               input_data,
               by = c("prdCode", "datCode"),
               allow.cartesian = TRUE
  )
  
  # multiplying by +-1
  # dat$value <- dat$value * dat$sign
  dat[ , value := value*sign]
  
  # changing NA to 0 to keep all rows in final data
  dat[is.na(dat)] <- 0
  
  # calculation
  final_data <- copy(input_data)
  if (nrow(dat[complete.cases(value), ]) > 0) {
    
    final_data <- rbind(final_data,
                        (dat[variable %in% "Volume",
                             .(prdName = Product,
                               prdCode = Product,
                               variable = "Volume",
                               value = if (length(unique(voluntName)) <= 1){sum(value)} else {numeric()}, # 2 times slower
                               valmult = max(valmult),
                               voluntName = if (length(unique(voluntName)) <= 1){unique(voluntName)} else {character()},
                               volmult = if (length(unique(voluntName)) <= 1){max(volmult)} else {integer()}
                             ), by = .(Product, Year, datType)])
                        , fill = TRUE)
    
    final_data <- rbind(final_data,
                        (dat[variable %in% "Value",
                             .(prdName = Product,
                               prdCode = Product,
                               variable = "Value",
                               value = sum(value) ,
                               valmult = max(valmult),
                               voluntName = if (length(unique(voluntName)) <= 1){unique(voluntName)} else {character()},
                               volmult = if (length(unique(voluntName)) <= 1){max(volmult)} else {integer()}
                             ), by = .(Product, Year, datType)])
                        , fill = TRUE)
  } else {NULL}
  
  
  final_data <- dcast(final_data,
                      prdName + datType + Year + prdCode + valmult
                      + voluntName + volmult + Price  ~ variable,
                      value.var = "value"
  )
  
  # changing parents' names
  final_data[final_data$prdName %in% product_names$prdCode, ]$prdName <-
    product_names$prdName[match(final_data[final_data$prdName %in% product_names$prdCode, ]$prdName, product_names$prdCode)] #########################
  
  # calculating Price
  final_data$Price[is.na(final_data$Price)] <- final_data$Value[
    is.na(final_data$Price)] / final_data$Volume[is.na(final_data$Price)]
  
  # dividing 
  final_data$Volume <- final_data$Volume / final_data$volmult
  final_data$Value <- final_data$Value / final_data$valmult
  
  # changing 0 and NaN to NA
  final_data[is.na(final_data)] <- NA
  final_data[final_data == 0] <- NA
  
  final_data <- merge(final_data, cpi, by = "Year", all.x= T)
  final_data <- merge(final_data, ord, by = "prdName", all.x= T)
  
  
  
  final_data <- as.data.table(final_data)
  setkey(final_data, datType, prdOrder, Year)
  final_data <- as.data.frame(final_data)
  
  dat_long_agr <- final_data[, c(nms)]
  
  # }
  # 
  #   
  #   
  #   
  #   
  #   datPK <- agg(dataPK, treeDataPK, productNames)
  #   
  #   
  #   datAD <- agg(dataAD, treeDataAD, productNames)
  #   
  
}

# needed:
## not necessary but recommended

# var <- c("Volume", "Value")
get_children_shares <- function(fulldata, aggregation_tree, var = "Volume") {
  # ...
}
fulldata <- "datAgr.rds"
aggregation_tree <- "PK2019_aggregation_tree.csv"



aggregate_effects <- function(childreneffects, childrenshares, aggregation_tree) {
  # ...
}
childreneffects <- "effectsLowest.rds"
aggregation_tree <- "PK2019_aggregation_tree.csv"



